As a mariadb expert, your task is to generate SQL queries based on user questions. Ensure that your mariadb queries are syntactically correct and tailored to the user's inquiry. Retrieve at most 10 results using and order them for relevance. Avoid querying for all columns from a table. Select only the necessary columns wrapped in backticks (`).  Stop after delivering the SQLQuery, avoiding follow-up questions.

only use the following tables, the ddl of each table will be shown: 
['Description of the table phppos_sales_items:\nsale_id (int(10)), item_id (int(10)), description (varchar(255)), serialnumber (varchar(255)), line (int(3)), quantity_purchased (double), item_cost_price (double), item_unit_price (double), discount_percent (double), commission (double), unit_measurement (varchar(100)), price_presentation (double), unit_quantity (double), unit_quantity_item (double), unit_quantity_presentation (double), has_selected_unit (tinyint(4)), name_unit (varchar(60)), has_sales_units (tinyint(4)), custom1_subcategory (varchar(80)), custom2_subcategory (varchar(80)), id_tier (int(11)), numero_cuenta (varchar(50)), numero_documento (varchar(20)), titular_cuenta (varchar(120)), tasa (double), tipo_documento (varchar(50)), tipo_numero (varchar(10)), fecha_estado (timestamp), tipo_cuenta (varchar(50)), observaciones (text), celular (varchar(100)), file_id (bigint(20)), img_uploaded_by (int(11)), commission_spa (double), employee_id_spa (int(11)), personalized (varchar(100)), signed_to (int(11)), is_combined (tinyint(4)), combinations (varchar(255)), name_combined (varchar(150)), code_line (varchar(10)), transaction_status (varchar(20)), comentarios (varchar(255)), disc_shop (double), quantity_promo (double), promo_type (int(11)), Relationships of the table:\nNone (None), phppos_sales (sale_id), phppos_items (item_id), phppos_transfer_files (file_id)', 'Description of the table phppos_sales:\nsale_id (int(10)), sale_time (timestamp), serie_number_invoice (varchar(30)), invoice_number (int(11)), ticket_number (int(11)), is_invoice (int(1)), alternate_number (int(11)), serie_alternate_number (varchar(45)), customer_id (int(10)), employee_id (int(10)), sold_by_employee_id (int(10)), location_id (int(11)), comment (text), show_comment_on_receipt (int(1)), payment_type (varchar(255)), cc_ref_no (varchar(255)), auth_code (varchar(255)), deleted_by (int(10)), deleted (int(1)), support_id (int(11)), comanda_id (int(11)), account_to_billed (int(11)), name_customer_c (varchar(100)), tipo (varchar(20)), subtotal (decimal(23,10)), descuento_item (decimal(23,10)), taxt (decimal(23,10)), transaction (varchar(50)), contact (text), transfer_id (bigint(20)), errors (longtext), status (varchar(50)), is_fe (tinyint(4)), exoneration (double), ref_note (varchar(4)), sale_rate (double), total (decimal(23,10)), documento (int(11)), suspended (int(1)), store_account_payment (int(1)), register_id (int(11)), date_deleted (datetime), tier_id (int(10)), ntable (int(11)), overwrite_tax (tinyint(4)), synchronizations_offline_id (int(11)), sale_id_offline (int(11)), another_currency (tinyint(4)), currency (varchar(10)), total_other_currency (decimal(23,10)), value_other_currency (decimal(23,10)), transaction_rate (double), opcion_sale (varchar(50)), divisa (varchar(10)), cufe (varchar(150)), qr (text), response_api (text), commnet_note (text), order_id (bigint(20)), discount_shop (decimal(23,10)), is_remission (tinyint(4)), date_expirate_payment (datetime), payment_number_fees (int(11)), type_fees_payment (varchar(45)), created_at (timestamp), updated_at (timestamp), Relationships of the table:\nNone (None), phppos_customers (person_id), phppos_employees (person_id), phppos_locations (location_id), phppos_technical_supports (Id_support), phppos_comandas (comanda_id), phppos_registers (register_id), phppos_price_tiers (id), phppos_synchronizations_offline (id)', 'Description of the table phppos_sales_receivable:\nid_sales_receivable (int(11)), sale_id (int(10)), status (tinyint(4)), order_payment (int(11)), total (double), payments (double), payment_date (datetime), created_at (datetime), updated_at (datetime), observation (text), Relationships of the table:\nNone (None), phppos_sales (sale_id)', 'Description of the table phppos_sales_withholdings:\nsale_id (int(11)), rete_id (varchar(100)), tope (double), percent (double), total (double), short_name (varchar(80)), base (double), account_id (int(11)), Relationships of the table:\nNone (None), phppos_sales (sale_id), phppos_withholdings_confg (rete_id), phppos_accounting_accounts (accounting_account_id)', 'Description of the table phppos_sales_remission:\nsale_id (int(10)), state_r (varchar(45)), link_file (varchar(200)), description (varchar(200)), updated (timestamp), Relationships of the table:\nNone (None), phppos_sales (sale_id), phppos_remisision_state (name)']

Exemple of questions and SQL QUERY:

What is my best-selling product in the month of August? -> "SELECT si.item_id, si.name_combined AS product_name, SUM(si.quantity_purchased) AS total_quantity
FROM phppos_sales s
JOIN phppos_sales_items si ON s.sale_id = si.sale_id
WHERE s.sale_time BETWEEN '2023-08-01 00:00:00' AND '2023-08-31 23:59:59'
AND s.tipo IN ('sale', 'ND')
AND s.deleted = 0
GROUP BY si.item_id, si.name_combined
ORDER BY total_quantity DESC
LIMIT 1;"
"What are my five best-selling products during the month of July?" -> "SELECT si.item_id, si.name_combined AS product_name, SUM(si.quantity_purchased) AS total_quantity
FROM phppos_sales s
JOIN phppos_sales_items si ON s.sale_id = si.sale_id
WHERE s.sale_time BETWEEN '2023-07-01 00:00:00' AND '2023-07-31 23:59:59'
AND s.tipo IN ('sale', 'ND')
AND s.deleted = 0
GROUP BY si.item_id, si.name_combined
ORDER BY total_quantity DESC
LIMIT 5;"
Who are my five best clients for the month of April? -> "# Reports TOP 5 clientes
select
        s.name_customer_c  as 'Client',
    FORMAT(SUM(s.subtotal), 0) AS 'Totla'
FROM
    phppos_sales AS s
GROUP BY s.customer_id
ORDER BY
    s.subtotal DESC
LIMIT 5;"
Who was the customer who made the most purchases in June? -> "SELECT COUNT(*)
FROM phppos_sales s
WHERE YEAR(s.sale_time) = 2023
  AND MONTH(s.sale_time) = 5;

SELECT CONCAT(p.first_name,' ',p.last_name) as name_customer, COUNT(s.customer_id) AS quantity_sales
FROM phppos_sales s
JOIN phppos_customers c ON s.customer_id = c.person_id 
JOIN phppos_people p ON s.customer_id = p.person_id
WHERE s.sale_time BETWEEN '2024-01-01 00:00:00' AND '2024-06-30 23:59:59'
AND s.tipo IN ('sale', 'ND')
AND s.deleted = 0
AND c.deleted = 0
GROUP BY s.customer_id
ORDER BY quantity_sales DESC
LIMIT 5;"
How many customers made purchases in August? -> "SELECT COUNT(DISTINCT s.customer_id) AS total_customers
FROM phppos_sales s
JOIN phppos_customers c ON s.customer_id = c.person_id 
WHERE s.sale_time BETWEEN '2024-01-01 00:00:00' AND '2024-06-30 23:59:59'
AND s.tipo IN ('sale', 'ND')
AND s.deleted = 0
AND c.deleted = 0;"
Which clients have increased or decreased their spending in the last three months?	"SELECT 
    CONCAT(p.first_name,' ',p.last_name) AS name_customer,
    SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() THEN 1 ELSE 0 END) AS quantity_sales_current,
    SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 6 MONTH) AND DATE_SUB(NOW(), INTERVAL 3 MONTH) THEN 1 ELSE 0 END) AS quantity_sales_previous,
    CASE 
        WHEN SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() THEN 1 ELSE 0 END) > SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 6 MONTH) AND DATE_SUB(NOW(), INTERVAL 3 MONTH) THEN 1 ELSE 0 END) THEN 'Aumentó'
        WHEN SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 3 MONTH) AND NOW() THEN 1 ELSE 0 END) < SUM(CASE WHEN s.sale_time BETWEEN DATE_SUB(NOW(), INTERVAL 6 MONTH) AND DATE_SUB(NOW(), INTERVAL 3 MONTH) THEN 1 ELSE 0 END) THEN 'Disminuyó'
        ELSE 'Igual'
    END AS status
FROM 
    phppos_sales s
JOIN 
    phppos_customers c ON s.customer_id = c.person_id 
JOIN 
    phppos_people p ON s.customer_id = p.person_id
WHERE 
    s.tipo IN ('sale', 'ND')
    AND s.deleted = 0
    AND c.deleted = 0
GROUP BY 
    s.customer_id
ORDER BY 
    quantity_sales_current DESC;" 
How many new customers bought in the month of June? -> "SELECT 
    CONCAT(p.first_name,' ',p.last_name) AS name_customer, 
    COUNT(s.customer_id) AS quantity_sales
FROM 
    phppos_sales s
JOIN 
    phppos_customers c ON s.customer_id = c.person_id 
JOIN 
    phppos_people p ON s.customer_id = p.person_id
WHERE 
    s.sale_time BETWEEN '2024-05-01 00:00:00' AND '2024-05-30 23:59:59'
    AND s.tipo IN ('sale', 'ND')
    AND s.deleted = 0
    AND c.deleted = 0
    AND s.customer_id NOT IN (
        SELECT s2.customer_id
        FROM phppos_sales s2
        JOIN phppos_customers c2 ON s2.customer_id = c.person_id 
        WHERE s2.sale_time < '2024-05-01 00:00:00'
        AND s2.tipo IN ('sale', 'ND')
		AND s2.deleted = 0
		AND c2.deleted = 0
    )
GROUP BY 
    s.customer_id
ORDER BY 
    quantity_sales DESC;"
Which customer stopped buying in July after being a regular buyer? -> "-- Para resolver este Query se debe definir que es un comprador habitual.
-- Para el ejemplo se tomo como comprador habitual aquel que realiza almenos una compra al mes durante 3 meses de seguido.
SET @base_month = '2023-09-01';

SELECT s.customer_id AS id_customer, 
       CONCAT(p.first_name, ' ', p.last_name) AS name_customer,
       COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 3 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) AS compras_hace_3_meses,
       COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 2 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) AS compras_hace_2_meses,
       COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 1 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) AS compras_hace_1_mes,
       COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(@base_month, '%Y-%m') THEN s.customer_id ELSE NULL END) AS compras_este_mes,
       CASE 
           WHEN COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(@base_month, '%Y-%m') THEN s.customer_id ELSE NULL END) = 0 AND 
                COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 1 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) > 0 AND 
                COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 2 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) > 0 AND
                COUNT(CASE WHEN DATE_FORMAT(s.sale_time, '%Y-%m') = DATE_FORMAT(DATE_SUB(@base_month, INTERVAL 3 MONTH), '%Y-%m') THEN s.customer_id ELSE NULL END) > 0
           THEN 'dejo de comprar'
           ELSE 'No es comprador habitual'
       END AS estado_cliente
FROM phppos_sales s
JOIN phppos_customers c ON s.customer_id = c.person_id 
JOIN phppos_people p ON s.customer_id = p.person_id
WHERE s.sale_time BETWEEN DATE_SUB(@base_month, INTERVAL 3 MONTH) AND LAST_DAY(@base_month)
  AND s.tipo IN ('sale', 'ND')
  AND s.deleted = 0
  AND c.deleted = 0
GROUP BY s.customer_id, p.first_name, p.last_name
HAVING compras_hace_3_meses > 0 OR compras_hace_2_meses > 0 OR compras_hace_1_mes > 0 OR compras_este_mes > 0;"
How many customers did not make purchases in May but did make purchases in June? -> "# Clientes que no realizaron compras en mayo
SELECT DISTINCT customer_id
FROM phppos_sales
WHERE sale_time NOT BETWEEN '2023-05-01 00:00:00' AND '2023-05-31 23:59:59';


# Clientes que sí realizaron compras en junio
SELECT DISTINCT customer_id
FROM phppos_sales
WHERE sale_time BETWEEN '2023-06-01 00:00:00' AND '2023-06-30 23:59:59';


# Clientes que no compraron en mayo, pero sí en junio
SELECT COUNT(*)
FROM (
    SELECT DISTINCT june_customers.customer_id
    FROM (
        SELECT DISTINCT customer_id
        FROM phppos_sales
        WHERE sale_time BETWEEN '2023-06-01 00:00:00' AND '2023-06-30 23:59:59'
    ) AS june_customers
    LEFT JOIN (
        SELECT DISTINCT customer_id
        FROM phppos_sales
        WHERE sale_time BETWEEN '2023-05-01 00:00:00' AND '2023-05-31 23:59:59'
    ) AS may_customers
    ON june_customers.customer_id = may_customers.customer_id
    WHERE may_customers.customer_id IS NULL
) AS result;"
What was the total revenue generated by returning customers in July? -> "# Ingresos por cliente
SELECT
    s.name_customer_c AS 'Client',
    FORMAT(SUM(
        (si.item_unit_price * si.quantity_purchased - si.item_unit_price * si.quantity_purchased * si.discount_percent / 100) -
        (si.item_cost_price * si.quantity_purchased)
    ), 0) AS 'Ganancia Item'
FROM
    phppos_sales AS s
    INNER JOIN phppos_sales_items AS si ON si.sale_id = s.sale_id
WHERE
    s.sale_time BETWEEN '2023-01-01 00:00:00' AND '2023-12-31 23:59:59'
GROUP BY
    s.customer_id
ORDER BY
    SUM(
        (si.item_unit_price * si.quantity_purchased - si.item_unit_price * si.quantity_purchased * si.discount_percent / 100) -
        (si.item_cost_price * si.quantity_purchased)
    ) DESC;
"
Who was my best-selling seller in August? -> "# Empleado  con mayor numero de ventas
SELECT
    pe.username as 'Empleado',
    SUM(s.subtotal) as 'Total vendio'
FROM
    phppos_sales AS s
    INNER JOIN phppos_employees pe ON pe.id = s.employee_id 
WHERE
    s.sale_time BETWEEN '2023-08-01 00:00:00' AND '2023-09-01 23:59:59'
GROUP BY
    s.employee_id 
ORDER BY
    count(*)  desc
limit 1;"
Which sellers generated the least sales in the month of June? -> "# Empleado  con menor numero de ventas
SELECT
    pe.username as 'Empleado',
    SUM(s.subtotal) as 'Total vendio'
FROM
    phppos_sales AS s
    INNER JOIN phppos_employees pe ON pe.id = s.employee_id 
WHERE
    s.sale_time BETWEEN '2023-08-01 00:00:00' AND '2023-09-01 23:59:59'
GROUP BY
    s.employee_id 
ORDER BY
    count(*)  asc limit 1;"

Question from the user:
"Dame un informe de ventas por mes en el total de años"

History:


Use the history as a guide.
Be careful with the names of the tables and columns, if necessary make the respective joins.
Be careful with the names of the columns and their respective tables to avoid consulting non-existent columns.
You must use the tables provided. 

Do not include explanatory text. Only generate the final SQL query wrapped in the JSON format below:
{
    "sql_query": "your sql query here"
}

